apiVersion: v1
kind: Namespace
metadata:
  name: benchmark
---
apiVersion: batch/v1
kind: Job
metadata:
  name: $JOBTYPE-$MODE-$PARAMETERQUOTE-$ID
  namespace: benchmark
  labels:
    app: $JOBTYPE-$MODE-$PARAMETERQUOTE
spec:
  template:
    spec:
      securityContext:
        runAsUser: 1000
      volumes:
      - name: tmpfs-volume
        emptyDir:
          medium: Memory
      - name: cpu-script
        configMap:
          name: cpu-script
          defaultMode: 0777
      nodeSelector:
        kubernetes.io/arch: $ARCH
        kubernetes.io/hostname: $BENCHNODESELECTOR
      containers:
      - name: cont
        resources:
          requests:
            cpu: 1
        volumeMounts:
          - mountPath: /tmp
            name: tmpfs-volume
          - name: cpu-script
            mountPath: /scripts/cpu.sh
            subPath: cpu.sh
        imagePullPolicy: Always
        image: quay.io/kinvolk/$JOBTYPE:latest-$ARCH
        command: ["/bin/sh", "-c"]
        args:
          - |-
            set -eu
            # Runs in busybox: the space in '$( (' is needed for a busybox syntax failure.
            SOCKETS=$(/scripts/cpu.sh sockets)
            CPUS=$(/scripts/cpu.sh cpus)
            CORES=$(/scripts/cpu.sh cores)
            CPU=$(/scripts/cpu.sh model)
            HYPERTHREADING=$(/scripts/cpu.sh ht)
            SYSTEM="$CPU (Sockets: $SOCKETS. CPUs: $CPUS. Cores: $CORES. HT: $HYPERTHREADING)"
            # JOBTYPE, MODE, PARAMETER, PARAMETERQUOTE, RESULT, ID, ITERATIONS, COST, and META are not shell variables.
            # PARAMETER can contain references to shell variables, so it's quoted in '' in the CSV printf line.
            echo "CSV:Name,Parameter,System,$RESULT,Job,Cost,Meta"
            # Helper variable ONE to have the same style for threads=VAR.
            ONE=1
            if [ $JOBTYPE = sysbench ] && ([ $MODE = mem ]); then
              for i in $(seq 1 $ITERATIONS); do
                sysbench --threads=$PARAMETER --time=30 memory --memory-total-size=500G run | tee /dev/stderr | grep 'MiB/sec' | cut -d '(' -f 2 | cut -d ' ' -f 1 | printf 'CSV:sysbench memory,--threads=$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$(cat)"
              done
            elif [ $JOBTYPE = sysbench ] && ([ $MODE = cpu ]); then
              for i in $(seq 1 $ITERATIONS); do
                sysbench --threads=$PARAMETER --time=30 cpu run | tee /dev/stderr | grep 'events per second' | cut -d : -f 2 | xargs | printf 'CSV:sysbench cpu,--threads=$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$(cat)"
              done
            elif [ $JOBTYPE = sysbench ] && ([ $MODE = fileio ]); then
              cd /tmp
              sysbench fileio --file-test-mode=rndwr prepare
              for i in $(seq 1 $ITERATIONS); do
                sysbench --threads=$PARAMETER --time=30 fileio --file-test-mode=rndwr run | tee /dev/stderr | grep 'written, MiB/s' | cut -d : -f 2 | xargs | printf 'CSV:sysbench fileio --file-test-mode=rndwr,--threads=$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$(cat)"
              done
            elif [ $JOBTYPE = stress-ng ]; then
              for i in $(seq 1 $ITERATIONS); do
                stress-ng --$MODE $PARAMETER --timeout 30s --metrics-brief 2>&1 | grep $MODE | tail -n 1 | awk '{print $9}' | printf 'CSV:stress-ng $MODE,threads=$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$(cat)"
              done
            elif [ $JOBTYPE = memtier ] && ([ $MODE = memcached ] || [ $MODE = redis ]); then
              cd /tmp
              PORT=7000
              if [ $MODE = memcached ]; then
                THREADS="$(( $PARAMETER ))"
                BENCHMARKTHREADS="$THREADS"
                BENCHMARKPROCESSES=1
                TYPE=threads
                PROTOCOL=memcache_binary
                memcached --port "$(( PORT + 1 ))" -u "$(whoami)" -t "$THREADS" &
              else
                THREADS=1
                BENCHMARKTHREADS=1
                BENCHMARKPROCESSES="$(( $PARAMETER ))"
                TYPE=processes
                PROTOCOL=redis
                for P in $(seq 1 $BENCHMARKPROCESSES); do
                  redis-server --port "$(( PORT + P ))" &
                done
              fi
              echo "Using $PARAMETER $TYPE for the database"
              for P in $(seq 1 $BENCHMARKPROCESSES); do
                while [ "$(wget "http://127.0.0.1:$(( PORT + P ))" 2>&1 | grep "Connection refused")" != "" ]; do
                  sleep 1
                  echo "Waiting for DB $P to start..."
                done
              done
              echo "Using $BENCHMARKPROCESSES processes and $BENCHMARKTHREADS threads for the benchmark client"
              for I in $(seq 1 $ITERATIONS); do
                WAIT=""
                for P in $(seq 1 $BENCHMARKPROCESSES); do
                  { memtier_benchmark -p "$(( PORT + P ))" -P "$PROTOCOL" -t "$BENCHMARKTHREADS" --test-time 30 --ratio 1:1 -c 25 -x 1 --data-size-range=10240-1048576 --key-pattern S:S  2>&1 | tee /dev/stderr | grep Totals | tail -n 1 | awk '{print $2}' | cut -d . -f 1 > "$P" ; } &
                  WAIT="$WAIT""$! "
                done
                wait $WAIT
                SUM=0
                for P in $(cat $(seq 1 $BENCHMARKPROCESSES)); do
                  SUM="$(( SUM + P ))"
                done
                printf 'CSV:memtier $MODE,%s=$PARAMETER,%s,%s,$ID,$COST,$META\n' "$TYPE" "$SYSTEM" "$SUM"
              done
              killall redis-server memcached || true
            elif [ $JOBTYPE = iperf3 ] && [ $MODE = iperf3 ]; then
              for PORT in $(seq 7000 7009); do
                while ! echo | nc iperf3-service "$PORT"; do
                  echo "Waiting for iperf3-service..."
                  sleep 1
                done
              done
              while ! echo | nc iperf3-service 9999 > /tmp/system-out; do
                sleep 1
              done
              SYSTEM="$(cat /tmp/system-out)"
              for i in $(seq 1 $ITERATIONS); do
                for PORT in $(seq 7000 7055); do
                  (iperf3 -p "$PORT" $PARAMETER -c iperf3-service --time 30 -J | grep bits_per_second | tail -n 1 | cut -d : -f 2 | cut -d , -f 1 | cut -d . -f 1 | xargs | echo "$(( $(cat)/1000/1000 ))" > "/tmp/$PORT" ) &
                done
                wait
                SUM=0
                for P in $(cd /tmp; cat $(seq 7000 7055)); do
                  SUM="$(( SUM + P ))"
                done
                printf '\nCSV:iperf3 $MODE,$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$SUM"
              done
            elif [ $JOBTYPE = ab ] && [ $MODE = nginx ]; then
              PORT=8000
              while ! echo | nc nginx-service "$PORT"; do
                echo "Waiting for nginx-service..."
                sleep 1
              done
              while ! echo | nc nginx-service 9999 > /tmp/system-out; do
                sleep 1
              done
              SYSTEM="$(cat /tmp/system-out)"
              for i in $(seq 1 $ITERATIONS); do
                ab -c $PARAMETER -t 30 -n 999999999 http://nginx-service:8000/ 2>&1 | tee /dev/stderr | grep 'Requests per second' | awk '{print $4}' | printf '\nCSV:ab $MODE,connections=$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$(cat)"
              done
            elif [ $JOBTYPE = fortio ] && [ $MODE = fortio ]; then
              cd /tmp
              if echo "$PARAMETER" | grep grpc > /dev/null; then
                PORT=8079
              else
                PORT=8080
              fi
              while ! echo | nc fortio-service "$PORT"; do
                echo "Waiting for fortio-service..."
                sleep 1
              done
              while ! echo | nc fortio-service 9999 > /tmp/system-out; do
                sleep 1
              done
              SYSTEM="$(cat /tmp/system-out)"
              for i in $(seq 1 $ITERATIONS); do
                REQ_BODY_LEN=50
                rm out.json || true
                fortio load $PARAMETER -payload-size=50 -keepalive=false -labels='-payload-size=50 -keepalive=false $PARAMETER Iteration: '"$i" -json=out.json "fortio-service:$PORT"
                cat out.json > /dev/stderr
                tac out.json | grep -m 1 Value | cut  -d ':' -f 2 | xargs | printf '\nCSV:fortio,$PARAMETER,%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$(awk "BEGIN{print "$(cat)"*1000}")"
              done
            elif [ $JOBTYPE = wrk2-benchmark ] && [ $MODE = nginx ]; then
              PORT=8000
              while ! echo | nc nginx-service "$PORT"; do
                echo "Waiting for nginx-service..."
                sleep 1
              done
              while ! echo | nc nginx-service 9999 > /tmp/system-out; do
                sleep 1
              done
              SYSTEM="$(cat /tmp/system-out)"
              for i in $(seq 1 $ITERATIONS); do
                LATENCY="$(wrk $PARAMETER -L -s /usr/local/share/wrk2/body-100-report.lua "http://nginx-service:$PORT" | tee /dev/stderr | grep 99.900% | awk '{print $2}')"
                # cut away unit (ms or s)
                if echo "$LATENCY" | grep ms > /dev/null; then
                  U=m
                else
                  U=s
                fi
                LATENCY="$(echo $LATENCY | cut -d "$U" -f 1)"
                # calculate ms if unit was s
                if [ "$U" = s ]; then
                  LATENCY="$(awk "BEGIN{print "$LATENCY"/1000}")"
                fi
                printf '\nCSV:wrk2 $MODE,$PARAMETER (body 100B),%s,%s,$ID,$COST,$META\n' "$SYSTEM" "$LATENCY"
              done
            else
              echo "ERROR: Unknown mode"
              exit 1
            fi
      restartPolicy: Never
  backoffLimit: 0
